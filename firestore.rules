/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a hybrid security model:
 *   - News articles are publicly readable, but writes are restricted to authorized authors.
 *   - Forum posts and comments are restricted to approved content.
 *
 * Data Structure:
 * - News articles are stored in the /news_articles/{newsArticleId} collection.
 * - Comments on news articles are stored in the /news_articles/{newsArticleId}/comments/{commentId} subcollection.
 * - Forum posts are stored in the /forum_posts/{forumPostId} collection.
 * - Comments on forum posts are stored in the /forum_posts/{forumPostId}/comments/{commentId} subcollection.
 *
 * Key Security Decisions:
 * - News articles are publicly readable.
 * - Only the author of a news article can update or delete it.
 * - Only approved forum posts and comments are accessible.
 * - The 'isApproved' field is used to control the visibility of forum posts and comments.
 * - Listing of comments is allowed for approved comments.
 *
 * Denormalization for Authorization:
 * - The `authorId` field is present in both `NewsArticle` and `Comment` documents to avoid needing to `get()` the parent document for authorization checks.
 * - The `isApproved` field is present in both `ForumPost` and `Comment` documents to easily control the visibility of content.
 *
 * Structural Segregation:
 * - Comments are stored as subcollections of both `news_articles` and `forum_posts` to simplify querying and access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to news articles and restricts write access to the author.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list): if true
     * @allow (create): if request.auth.uid != null && request.resource.data.authorId == request.auth.uid
     * @allow (update, delete): if isSignedIn() && isExistingOwner(resource.data.authorId)
     * @deny (create): if request.auth.uid == null
     * @deny (update, delete): if !isSignedIn() || !isExistingOwner(resource.data.authorId)
     * @principle Allows public reading of news articles but enforces document ownership for writes.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Grants read and write access to comments on news articles based on approval status and ownership.
     * @path /news_articles/{newsArticleId}/comments/{commentId}
     * @allow (get, list): if true;
     * @allow (create): if isSignedIn();
     * @allow (update, delete): if isSignedIn() && isExistingOwner(resource.data.authorId);
     * @deny (create): if !isSignedIn()
     * @deny (update, delete): if !isSignedIn() || !isExistingOwner(resource.data.authorId)
     * @principle Enforces document ownership for writes and allows public reads.
     */
    match /news_articles/{newsArticleId}/comments/{commentId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Grants read and write access to forum posts based on approval status.
     * @path /forum_posts/{forumPostId}
     * @allow (get, list): if true;
     * @allow (create): if isSignedIn() && request.resource.data.authorId == request.auth.uid;
     * @allow (update, delete): if isSignedIn() && isExistingOwner(resource.data.authorId);
     * @deny (create): if !isSignedIn()
     * @deny (update, delete): if !isSignedIn() || !isExistingOwner(resource.data.authorId)
     * @principle Enforces that only approved forum posts are accessible.
     */
    match /forum_posts/{forumPostId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Grants read and write access to comments on forum posts based on approval status and ownership.
     * @path /forum_posts/{forumPostId}/comments/{commentId}
     * @allow (get, list): if true;
     * @allow (create): if isSignedIn();
     * @allow (update, delete): if isSignedIn() && isExistingOwner(resource.data.authorId);
     * @deny (create): if !isSignedIn()
     * @deny (update, delete): if !isSignedIn() || !isExistingOwner(resource.data.authorId)
     * @principle Enforces that only approved comments are accessible and enforces document ownership for writes.
     */
    match /forum_posts/{forumPostId}/comments/{commentId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}