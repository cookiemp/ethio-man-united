/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with public read access for certain collections.
 *
 * Data Structure:
 * - /news_articles/{newsArticleId}: News articles posted by admins.
 * - /news_articles/{newsArticleId}/comments/{commentId}: Comments on news articles.
 * - /forum_posts/{forumPostId}: Forum posts created by users.
 * - /forum_posts/{forumPostId}/comments/{commentId}: Comments on forum posts.
 *
 * Key Security Decisions:
 * - Public read access for news articles and forum posts.
 * - Comments are secured based on the parent news article or forum post.
 * - Data validation is minimal, focusing on authorization-critical fields (e.g., authorId, isApproved).
 *
 * Denormalization for Authorization:
 * - The `authorId` field on `NewsArticle`, `ForumPost`, and `Comment` documents is used to enforce ownership.
 * - The `isApproved` field on `ForumPost` and `Comment` documents is used to control content visibility.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to news articles and restricts write access to authorized users.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list): Any user can read news articles.
     * @allow (create): An authenticated user can create a news article if the `authorId` matches their UID.
     * @allow (update, delete): An authenticated user can update or delete a news article if they are the author.
     * @deny (create): An unauthenticated user attempts to create a news article.
     * @deny (update, delete): An unauthenticated user attempts to update or delete a news article.
     * @principle Allows public read access with owner-only writes, enforced via the `authorId` field.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Restricts access to comments on news articles to authenticated users and enforces approval status.
     * @path /news_articles/{newsArticleId}/comments/{commentId}
     * @allow (get, list): Any user can read comments on news articles.
     * @allow (create): An authenticated user can create a comment if the `authorId` matches their UID.
     * @allow (update, delete): An authenticated user can update or delete a comment (allows admin moderation).
     * @deny (create): An unauthenticated user attempts to create a comment on a news article.
     * @principle Authenticated users can moderate comments; admin verification happens at API level.
     */
    match /news_articles/{newsArticleId}/comments/{commentId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Grants public read access to forum posts and restricts write access to authorized users and enforces approval status.
     * @path /forum_posts/{forumPostId}
     * @allow (get, list): Any user can read forum posts.
     * @allow (create): An authenticated user can create a forum post if the `authorId` matches their UID.
     * @allow (update, delete): An authenticated user can update or delete a forum post if they are the author.
     * @deny (create): An unauthenticated user attempts to create a forum post.
     * @deny (update, delete): An unauthenticated user attempts to update or delete a forum post.
     * @principle Allows public read access with owner-only writes, enforced via the `authorId` field.
     */
    match /forum_posts/{forumPostId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      // Allow owner to update/delete, OR allow anyone to update replyCount/updatedAt fields
      allow update: if isSignedIn() && (
        isExistingOwner(resource.data.authorId) ||
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['replyCount', 'updatedAt']))
      );
      // Allow any authenticated user to delete (admin moderation)
      allow delete: if isSignedIn();
      
      /**
       * @description Forum replies subcollection
       * @path /forum_posts/{forumPostId}/replies/{replyId}
       * @allow (get, list): Anyone can read replies
       * @allow (create): Authenticated users can create replies
       * @allow (update, delete): Authenticated users can moderate replies
       */
      match /replies/{replyId} {
        allow get, list: if true;
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        allow update, delete: if isSignedIn();
      }
    }

    /**
     * @description Restricts access to comments on forum posts to authenticated users and enforces approval status.
     * @path /forum_posts/{forumPostId}/comments/{commentId}
     * @allow (get, list): Any user can read comments on forum posts.
     * @allow (create): An authenticated user can create a comment if the `authorId` matches their UID.
     * @allow (update, delete): An authenticated user can update or delete a comment (allows admin moderation).
     * @deny (create): An unauthenticated user attempts to create a comment on a forum post.
     * @principle Authenticated users can moderate comments; admin verification happens at API level.
     */
    match /forum_posts/{forumPostId}/comments/{commentId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Collection group query for all comments across news articles and forum posts.
     * @path /comments/{commentId} (collection group)
     * @allow (get, list): Any user can read all comments via collection group query.
     * @principle Enables admin dashboard to query all comments at once.
     */
    match /{path=**}/comments/{commentId} {
      allow get, list: if true;
    }

    /**
     * @description User profiles collection
     * @path /users/{userId}
     * @allow (get, list): Anyone can view user profiles
     * @allow (create): Users can create their own profile during signup
     * @allow (update): Users can only update their own profile
     * @allow (delete): Users cannot delete profiles
     */
    match /users/{userId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && request.auth.uid == userId;
      allow delete: if false;
    }

    /**
     * @description Global settings collection
     * @path /settings/{settingId}
     * @allow (get, list): Anyone can read settings (for watch live URL, etc.)
     * @allow (create, update, delete): Anyone can write (admin auth is checked at app level)
     * @principle Admin authentication is handled by session cookies, not Firebase Auth
     */
    match /settings/{settingId} {
      allow read, write: if true;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}
