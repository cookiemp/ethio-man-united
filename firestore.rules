/**
 * @fileOverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a hybrid security model. News articles and forum posts can be read publicly,
 * but modifications are restricted. Comments are also publicly readable but depend on approval status and
 * path-based ownership to determine write access. The `isApproved` boolean and path are critical to the
 * overall security posture.
 *
 * Data Structure:
 * - /news_articles/{newsArticleId}: Publicly readable news articles.
 * - /news_articles/{newsArticleId}/comments/{commentId}: Comments on news articles.
 * - /forum_posts/{forumPostId}: Publicly readable forum posts.
 * - /forum_posts/{forumPostId}/comments/{commentId}: Comments on forum posts.
 *
 * Key Security Decisions:
 * - News Articles and Forum Posts are publicly listable.
 * - Comments require approval from an admin via the `isApproved` field.
 * - Only approved comments can be viewed via `get` requests.
 * - The rules validate that the `authorId` of new documents matches the authenticated user's UID.
 * - The rules do NOT validate the specific data types of content fields.
 *
 * Denormalization for Authorization:
 * - The `isApproved` field is included in both `ForumPost` and `Comment` entities to avoid costly `get()` calls.
 *   This allows security rules to quickly determine if a post or comment is approved without having to fetch additional data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to news articles and restricts write access to authorized users.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list): if true
     * @allow (create): if request.auth != null && request.resource.data.authorId == request.auth.uid
     * @allow (update, delete): if isSignedIn() && resource.data.authorId == request.auth.uid && resource != null
     * @deny (create): if request.auth == null
     * @deny (update, delete): if !isSignedIn() || resource.data.authorId != request.auth.uid || resource == null
     * @principle Allows anyone to read a news article, but only the author can modify or delete it.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Allows read access to approved comments on news articles, restricts creation to signed-in users, and restricts updates/deletes to the author.
     * @path /news_articles/{newsArticleId}/comments/{commentId}
     * @allow (get): if resource.data.isApproved == true
     * @allow (list): if true
     * @allow (create): if isSignedIn() && request.resource.data.authorId == request.auth.uid;
     * @allow (update, delete): if isExistingOwner(resource.data.authorId)
     * @deny (get): if resource.data.isApproved != true
     * @deny (create): if !isSignedIn() || request.resource.data.authorId != request.auth.uid
     * @deny (update, delete): if !isSignedIn() || resource.data.authorId != request.auth.uid || resource == null
     * @principle Publicly readable, but writes restricted to the author and approval status.
     */
    match /news_articles/{newsArticleId}/comments/{commentId} {
      allow get: if resource.data.isApproved == true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Allows public read access to forum posts and restricts write access to authorized users.
     * @path /forum_posts/{forumPostId}
     * @allow (get, list): if true
     * @allow (create): if isSignedIn() && request.resource.data.authorId == request.auth.uid
     * @allow (update, delete): if isExistingOwner(resource.data.authorId)
     * @deny (create): if !isSignedIn() || request.resource.data.authorId != request.auth.uid
     * @deny (update, delete): if !isSignedIn() || resource.data.authorId != request.auth.uid || resource == null
     * @principle Allows anyone to read a forum post, but only the author can modify or delete it.
     */
    match /forum_posts/{forumPostId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Allows read access to approved comments on forum posts, restricts creation to signed-in users, and restricts updates/deletes to the author.
     * @path /forum_posts/{forumPostId}/comments/{commentId}
     * @allow (get): if resource.data.isApproved == true
     * @allow (list): if true
     * @allow (create): if isSignedIn() && request.resource.data.authorId == request.auth.uid;
     * @allow (update, delete): if isExistingOwner(resource.data.authorId)
     * @deny (get): if resource.data.isApproved != true
     * @deny (create): if !isSignedIn() || request.resource.data.authorId != request.auth.uid
     * @deny (update, delete): if !isSignedIn() || resource.data.authorId != request.auth.uid || resource == null
     * @principle Publicly readable, but writes restricted to the author and approval status.
     */
    match /forum_posts/{forumPostId}/comments/{commentId} {
      allow get: if resource.data.isApproved == true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }

    // ========================= Helper functions =========================

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId The user ID to compare against the request's authentication UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the existing document.
     * @param {string} userId The user ID to compare against the request's authentication UID.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}