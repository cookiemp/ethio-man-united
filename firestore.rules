/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and explicit
 * approval checks where applicable, while maintaining flexibility for rapid
 * data model iteration.  It uses subcollections to provide structural segregation.
 *
 * Data Structure:
 * - /news_articles/{newsArticleId}: Public news articles, readable by everyone, but writeable only by an admin via `isApproved`.
 * - /news_articles/{newsArticleId}/comments/{commentId}: Comments on news articles, requiring approval.
 * - /forum_posts/{forumPostId}: Forum posts, readable by everyone if `isApproved`, writeable by their authors and updatable only by an admin via `isApproved`.
 * - /forum_posts/{forumPostId}/comments/{commentId}: Comments on forum posts, requiring approval.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Write operations without explicit authorization are denied.
 * - The `isApproved` field gatekeeps content visibility/writability.
 *
 * Denormalization for Authorization:
 * - The `isApproved` field is present on both posts and comments to allow for
 *   authorization checks without additional `get()` calls.
 *
 * Structural Segregation:
 * - News articles and forum posts are stored in separate top-level collections to
 *   allow for tailored security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to news articles, but restricts write access to admins.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list) - Any user can read news articles.
     * @allow (create) - Fails. News articles can not be created directly.
     * @allow (update, delete) - News articles can not be modified or deleted.
     * @deny (create, update, delete) - All write operations are denied on the collection group.
     * @principle Public read, admin-only writes (controlled by isApproved on subcollection).
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows users to create comments on news articles if they are approved. Restricts modifications and deletes.
     * @path /news_articles/{newsArticleId}/comments/{commentId}
     * @allow (create) - Allow creation if the comment's `isApproved` is true and `authorId` is current user.
     * @allow (get, list) - Any user can read comments.
     * @allow (update) - Fails. Comments can not be updated
     * @allow (delete) - Fails. Comments can not be deleted.
     * @deny (create) - Creation denied if `isApproved` is not true, or `authorId` doesn't match.
     * @deny (update, delete) - All modifications are denied.
     * @principle Requires approval for comment creation; no modifications allowed after creation.
     */
    match /news_articles/{newsArticleId}/comments/{commentId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid && request.resource.data.isApproved == true;
      allow update, delete: if false;
    }

    /**
     * @description Allows public read access to forum posts if approved, allows users to create their own posts, allows admins to modify approval status.
     * @path /forum_posts/{forumPostId}
     * @allow (get, list) - Any user can read approved forum posts.
     * @allow (create) - Allow creation if the post's `authorId` is current user.
     * @allow (update) - Allow update if the post's `isApproved` is true.
     * @allow (delete) - Fails. No user can delete.
     * @deny (create) - Creation denied if `authorId` doesn't match.
     * @deny (update, delete) - All modifications denied if not approved, all deletes denied.
     * @principle Public read for approved posts, user-owned writes, admin-controlled approval.
     */
    match /forum_posts/{forumPostId} {
      allow get, list: if resource.data.isApproved == true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if resource.data.isApproved == true;
      allow delete: if false;
    }

    /**
     * @description Allows users to create approved comments on forum posts, restricts modifications and deletes.
     * @path /forum_posts/{forumPostId}/comments/{commentId}
     * @allow (create) - Allow creation if the comment's `isApproved` is true and `authorId` is current user.
     * @allow (get, list) - Any user can read comments.
     * @allow (update) - Fails. Comments can not be updated
     * @allow (delete) - Fails. Comments can not be deleted.
     * @deny (create) - Creation denied if `isApproved` is not true, or `authorId` doesn't match.
     * @deny (update, delete) - All modifications are denied.
     * @principle Requires approval for comment creation; no modifications allowed after creation.
     */
    match /forum_posts/{forumPostId}/comments/{commentId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid && request.resource.data.isApproved == true;
      allow update, delete: if false;
    }

  }

  function isSignedIn() {
    return request.auth != null;
  }
}